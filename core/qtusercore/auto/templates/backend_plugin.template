<?xml version="1.0" encoding="utf-8"?>
<template>
    <file> 
        <name><![CDATA[
CMakeLists.txt
		]]></name>
	    <source><![CDATA[
set(LIBS ${PLUGIN_BASE_LIBS})
__add_real_target(QCCPlugin@Name@ dll SOURCE @name@plugin.h
											 @name@plugin.cpp
											 @name@ui.h
											 @name@ui.cpp
									   QTUI @name@.ui
									   LIB ${LIBS}
									   FOLDER plugin
									   )
__append_global_property(GLOBAL_PLUGINS QCCPlugin@Name@)
		]]></source>	
    </file>
    <file> 
        <name><![CDATA[
@name@plugin.h
		]]></name>
	    <source><![CDATA[
#ifndef _@NAME@PLUGIN_@TIME@_H
#define _@NAME@PLUGIN_@TIME@_H
#include "qcc/plugin/qccplugininterface.h"
#include <QtWidgets/QAction>

class @Name@UI;
class QCCPlugin@Name@ : public QObject, public QCCBackendInterface
{
	Q_OBJECT
	Q_PLUGIN_METADATA(IID "qcc.plugin.QCCPlugin@Name@")
	Q_INTERFACES(QCCBackendInterface)
public:
	QCCPlugin@Name@();
	virtual ~QCCPlugin@Name@();

protected:
	void start() override;
	void stop() override;

public slots:
	void slotPluginCheck(bool on);
protected:
	QAction* m_action;
	@Name@UI* m_ui;
};

#endif // _@NAME@PLUGIN_@TIME@_H
		]]></source>	
    </file>
    <file> 
        <name><![CDATA[
@name@plugin.cpp
		]]></name>
	    <source><![CDATA[
#include "@name@plugin.h"
#include "@name@ui.h"
#include "qcc/interface/menuinterface.h"
#include "qcc/interface/idockermanager.h"

QCCPlugin@Name@::QCCPlugin@Name@()
	: m_action(nullptr)
	, m_ui(nullptr)
{

}

QCCPlugin@Name@::~QCCPlugin@Name@()
{

}

void QCCPlugin@Name@::start()
{
	m_action = qcc::addPluginAction(QString::fromLocal8Bit("xxx"));
	m_action->setCheckable(true);
	QObject::connect(m_action, SIGNAL(toggled(bool)), this, SLOT(slotPluginCheck(bool)));
}

void QCCPlugin@Name@::stop()
{
	qcc::removePluginAction(m_action);
}

void QCCPlugin@Name@::slotPluginCheck(bool on)
{
	if(!m_ui)
		m_ui = new @Name@UI();

	if (on)
	{
		qcc::DockState state;
		state.name = QString::fromLocal8Bit("xxx");
		qcc::registerRightWidget(m_ui, state);
	}
	else
	{
		qcc::unRegisterWidget(m_ui);
		delete m_ui;
		m_ui = nullptr;
	}
}
		]]></source>	
    </file>
    <file> 
        <name><![CDATA[
@name@ui.h
		]]></name>
	    <source><![CDATA[
#ifndef _@NAME@UI_@TIME@_H
#define _@NAME@UI_@TIME@_H
#include <QtWidgets/QWidget>
#include "ui_@name@.h"

#include "scc/log/tracer.h"
class @Name@UI : public QWidget
{
	Q_OBJECT
public:
	@Name@UI(QWidget* parent = nullptr);
	virtual ~@Name@UI();

protected:
	Ui::@Name@* ui;
};
#endif // _@NAME@UI_@TIME@_H
		]]></source>	
    </file>
    <file> 
        <name><![CDATA[
@name@ui.cpp
		]]></name>
	    <source><![CDATA[
#include "@name@ui.h"
#include <QtWidgets/QBoxLayout>

#include "scc/log/log.h"

#include "../..//buildinfo.h"

@Name@UI::@Name@UI(QWidget* parent)
	:QWidget(parent)
	, ui(new Ui::@Name@())
{
	ui->setupUi(this);
}

@Name@UI::~@Name@UI()
{
}
		]]></source>	
    </file>
    <file> 
        <name><![CDATA[
@name@.ui
		]]></name>
	    <source><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<ui version="4.0">
 <class>@Name@</class>
 <widget class="QWidget" name="@Name@">
  <property name="geometry">
   <rect>
    <x>0</x>
    <y>0</y>
    <width>332</width>
    <height>613</height>
   </rect>
  </property>
  <property name="windowTitle">
   <string>@Name@Form</string>
  </property>
 </widget>
 <resources/>
 <connections/>
</ui>
		]]></source>	
    </file>
</template>
