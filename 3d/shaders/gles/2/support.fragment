/* Support Fragment*/

precision mediump float;

varying vec3 viewDirection;
varying vec3 normal;
varying vec3 worldPosition;
varying float flag;

uniform vec4 ambient ;//= vec4(0.0, 0.0, 0.0, 1.0);
uniform vec4 diffuse ;//= vec4(1.0, 1.0, 1.0, 1.0);
uniform vec4 specular;// = vec4(0.125, 0.125, 0.125, 1.0);
const float specularPower = 12.0;
const vec3 lightDirection = vec3(0.0, 0.0, 1.0);

uniform vec4 stateColors[6];

uniform vec3 minSpace;
uniform vec3 maxSpace;
uniform float bottom; 
const float topVisibleHeight = 100000.0;
const float bottomVisibleHeight = -1000.0;

void main( void )
{
	int xxx = int(flag);
    vec4 color = stateColors[int(1.0)];
//    color.a = flag;

	if(worldPosition.z < bottomVisibleHeight || worldPosition.z > topVisibleHeight)
		discard;
	
	vec3 fnormal 		  =	normalize(normal);
	vec4 specular_color   = specular;
	
	float NdotL 		  = dot(fnormal, lightDirection);
	vec4 ambientColor 	  = ambient * color;
	vec3 freflection      = normalize(((2.0 * fnormal) * NdotL) - lightDirection);
	vec3 fViewDirection   = normalize(viewDirection);
	float RdotV           = max(0.0, dot(freflection, fViewDirection)); 
	vec4 diffuseColor     = NdotL * diffuse * color;
	vec4 specularColor    = specular * pow( RdotV, specularPower);
	vec4 coreColor = ambientColor + specularColor + diffuseColor;
	
    if(worldPosition.x < minSpace.x || worldPosition.y < minSpace.y || worldPosition.z < minSpace.z || worldPosition.x > maxSpace.x || worldPosition.y > maxSpace.y || worldPosition.z > maxSpace.z)
	{
		coreColor *= 0.3;
			coreColor.r += 0.6;
	}
	
//        if( abs(worldPosition.z - bottom) < 0.01 )
//        {
//                coreColor.g += 0.4;
//        }
	
	//gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);
   gl_FragColor = vec4(coreColor.rgb, 1.0);
}
